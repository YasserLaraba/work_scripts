workflow:
  name: project_deployment

stages:
    - sonarqube-check
    - build
    - deploy
    - cleanup


sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD
  allow_failure: true
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
  tags:
     - a-runner

  
build_image:
  stage: build
  image: docker:24.0.5
  variables:
    COMPOSE_COMMAND: ""
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      command: ["--tls=false"]
  before_script:
    - docker info
    - docker login registry-new.wissal-group.com -u $USER -p $PASSWORD
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "dev" ]; then
        cp .env.dev .env
        COMPOSE_COMMAND="-f docker-compose-dev.yml build"
      elif [ "$CI_COMMIT_BRANCH" == "staging" ]; then
        cp .env.staging .env
        COMPOSE_COMMAND="-f docker-compose-stg.yml build"
      elif [ "$CI_COMMIT_BRANCH" == "production" ]; then
        cp .env.production .env
        COMPOSE_COMMAND="-f docker-compose-prod.yml build"
      else
        echo "This branch is not configured for deployment."
        exit 1
      fi

      docker-compose $COMPOSE_COMMAND
      docker image ls
      docker image tag path/to/image/in/registry path/to/image/in/registry-$CI_COMMIT_BRANCH
      docker push path/to/image/in/registry-$CI_COMMIT_BRANCH
  tags:
    - a-runner
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && ( $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "dev")



deploy:
   image: debian:12-slim
   stage: deploy
   tags:
     - a-runner
   before_script: 
      - echo "---------Acces to the server and run updater--------"
      - apt-get update && apt-get install -y sshpass
      - mkdir ~/.ssh && touch ~/.ssh/id_rsa
      - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa # Write the private key, which is in base64 and stored as a CI/CD variable in the admin area of the GitLab instance, into the empty 'id_rsa' file created 
      - chmod 600 /root/.ssh/id_rsa
   script:
     - |
      if [ "$CI_COMMIT_BRANCH" == "dev" ]; then
        SERVER_IP=$DEV_SERVER_IP
        SERVER_USER=$DEV_SERVER_USER
        ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "hostname -I && sh /path/to/script.sh"
      elif [ "$CI_COMMIT_BRANCH" == "staging" ]; then
        SERVER_IP=$STAGING_SERVER_IP
        SERVER_USER=$STAGING_SERVER_USER
        ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "hostname -I && sh /path/to/script.sh"
      elif [ "$CI_COMMIT_BRANCH" == "production" ]; then
        SERVER_IP=$WIKEYS_SERVER_IP
        SERVER_USER=$PROD_SERVER_USER
        ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "hostname -I && sh /path/to/script.sh"
      else
        echo "This branch is not configured for deployment."
        exit 1
      fi
   
   rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && ( $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "dev")

   needs:
     - build_image

cleanup:
  stage: cleanup
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  tags:
    - a-runner
  script:
    - echo "Cleaning up Docker images..."
    - |
      
      if [ "$CI_COMMIT_BRANCH" == "dev" ]; then
        curl --header "PRIVATE-TOKEN: $clone_token" --request DELETE "https://gitlab.url/api/v4/projects/$CI_PROJECT_ID/registry/repositories/0/tags/latest"
      elif [ "$CI_COMMIT_BRANCH" == "staging" ]; then
        curl --header "PRIVATE-TOKEN: $clone_token" --request DELETE "https://gitlab.url/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1/tags/latest"
      elif [ "$CI_COMMIT_BRANCH" == "production" ]; then
        curl --header "PRIVATE-TOKEN: $clone_token" --request DELETE "https://gitlab.url/api/v4/projects/$CI_PROJECT_ID/registry/repositories/2/tags/latest"
      else
        echo "This branch is not configured for deployment."
        exit 1
      fi
  
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && ( $CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "dev")
      
  needs:
    - deploy

